{"remainingRequest":"/home/selim/jhipsdev/node_modules/thread-loader/dist/cjs.js??ref--4-2!/home/selim/jhipsdev/node_modules/ts-loader/index.js??ref--4-3!/home/selim/jhipsdev/node_modules/tslint-loader/index.js!/home/selim/jhipsdev/src/main/webapp/app/entities/task/task-update.tsx","dependencies":[{"path":"/home/selim/jhipsdev/src/main/webapp/app/entities/task/task-update.tsx","mtime":1540057954565},{"path":"/home/selim/jhipsdev/node_modules/react-hot-loader/webpack.js","mtime":1505850161000},{"path":"/home/selim/jhipsdev/node_modules/cache-loader/dist/cjs.js","mtime":1540058733161},{"path":"/home/selim/jhipsdev/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/selim/jhipsdev/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/selim/jhipsdev/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button, Row, Col, Label } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\n// tslint:disable-next-line:no-unused-variable\nimport { Translate } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { getUsers } from 'app/modules/administration/user-management/user-management.reducer';\nimport { getEntities as getTasks } from 'app/entities/task/task.reducer';\nimport { getEntity, updateEntity, createEntity, reset } from './task.reducer';\n// tslint:disable-next-line:no-unused-variable\nimport { convertDateTimeFromServer } from 'app/shared/util/date-utils';\nvar TaskUpdate = /** @class */ (function (_super) {\n    tslib_1.__extends(TaskUpdate, _super);\n    function TaskUpdate(props) {\n        var _this = _super.call(this, props) || this;\n        _this.saveEntity = function (event, errors, values) {\n            values.createDate = new Date(values.createDate);\n            values.deadline = new Date(values.deadline);\n            if (errors.length === 0) {\n                var taskEntity = _this.props.taskEntity;\n                var entity = tslib_1.__assign({}, taskEntity, values);\n                if (_this.state.isNew) {\n                    _this.props.createEntity(entity);\n                }\n                else {\n                    _this.props.updateEntity(entity);\n                }\n            }\n        };\n        _this.handleClose = function () {\n            _this.props.history.push('/apps/task');\n        };\n        _this.state = {\n            userId: '0',\n            taskId: '0',\n            parentId: '0',\n            isNew: !_this.props.match.params || !_this.props.match.params.id\n        };\n        return _this;\n    }\n    TaskUpdate.prototype.componentWillUpdate = function (nextProps, nextState) {\n        if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\n            this.handleClose();\n        }\n    };\n    TaskUpdate.prototype.componentDidMount = function () {\n        if (this.state.isNew) {\n            this.props.reset();\n        }\n        else {\n            this.props.getEntity(this.props.match.params.id);\n        }\n        this.props.getUsers();\n        this.props.getTasks();\n    };\n    TaskUpdate.prototype.render = function () {\n        var _a = this.props, taskEntity = _a.taskEntity, users = _a.users, tasks = _a.tasks, loading = _a.loading, updating = _a.updating;\n        var isNew = this.state.isNew;\n        return (React.createElement(\"div\", null,\n            React.createElement(Row, { className: \"justify-content-center\" },\n                React.createElement(Col, { md: \"8\" },\n                    React.createElement(\"h2\", { id: \"todoListApp.task.home.createOrEditLabel\" },\n                        React.createElement(Translate, { contentKey: \"todoListApp.task.home.createOrEditLabel\" }, \"Create or edit a Task\")))),\n            React.createElement(Row, { className: \"justify-content-center\" },\n                React.createElement(Col, { md: \"8\" }, loading ? (React.createElement(\"p\", null, \"Loading...\")) : (React.createElement(AvForm, { model: isNew ? {} : taskEntity, onSubmit: this.saveEntity },\n                    !isNew ? (React.createElement(AvGroup, null,\n                        React.createElement(Label, { for: \"id\" },\n                            React.createElement(Translate, { contentKey: \"global.field.id\" }, \"ID\")),\n                        React.createElement(AvInput, { id: \"task-id\", type: \"text\", className: \"form-control\", name: \"id\", required: true, readOnly: true }))) : null,\n                    React.createElement(AvGroup, null,\n                        React.createElement(Label, { id: \"nameLabel\", for: \"name\" },\n                            React.createElement(Translate, { contentKey: \"todoListApp.task.name\" }, \"Name\")),\n                        React.createElement(AvField, { id: \"task-name\", type: \"text\", name: \"name\" })),\n                    React.createElement(AvGroup, null,\n                        React.createElement(Label, { id: \"descriptionLabel\", for: \"description\" },\n                            React.createElement(Translate, { contentKey: \"todoListApp.task.description\" }, \"Description\")),\n                        React.createElement(AvField, { id: \"task-description\", type: \"text\", name: \"description\" })),\n                    !isNew ? (React.createElement(AvGroup, null,\n                        React.createElement(Label, { id: \"createDateLabel\", for: \"createDate\" },\n                            React.createElement(Translate, { contentKey: \"todoListApp.task.createDate\" }, \"Create Date\")),\n                        React.createElement(AvInput, { id: \"task-createDate\", type: \"datetime-local\", className: \"form-control\", name: \"createDate\", readOnly: true, value: isNew ? null : convertDateTimeFromServer(this.props.taskEntity.createDate) }))) : null,\n                    React.createElement(AvGroup, null,\n                        React.createElement(Label, { id: \"deadlineLabel\", for: \"deadline\" },\n                            React.createElement(Translate, { contentKey: \"todoListApp.task.deadline\" }, \"Deadline\")),\n                        React.createElement(AvInput, { id: \"task-deadline\", type: \"datetime-local\", className: \"form-control\", name: \"deadline\", value: isNew ? null : convertDateTimeFromServer(this.props.taskEntity.deadline) })),\n                    React.createElement(AvGroup, null,\n                        React.createElement(Label, { id: \"statusLabel\" },\n                            React.createElement(Translate, { contentKey: \"todoListApp.task.status\" }, \"Status\")),\n                        React.createElement(AvInput, { id: \"task-status\", type: \"select\", className: \"form-control\", name: \"status\", value: (!isNew && taskEntity.status) || 'INPROGRESS' },\n                            React.createElement(\"option\", { value: \"INPROGRESS\" },\n                                React.createElement(Translate, { contentKey: \"todoListApp.Status.INPROGRESS\" })),\n                            React.createElement(\"option\", { value: \"COMPLETED\" },\n                                React.createElement(Translate, { contentKey: \"todoListApp.Status.COMPLETED\" })),\n                            React.createElement(\"option\", { value: \"EXPIRED\" },\n                                React.createElement(Translate, { contentKey: \"todoListApp.Status.EXPIRED\" })))),\n                    React.createElement(AvGroup, null,\n                        React.createElement(Label, { for: \"task.id\" },\n                            React.createElement(Translate, { contentKey: \"todoListApp.task.task\" }, \"Task\")),\n                        React.createElement(AvInput, { id: \"task-task\", type: \"select\", className: \"form-control\", name: \"task.id\" },\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\n                            tasks\n                                ? tasks.map(function (otherEntity) { return (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.name)); })\n                                : null)),\n                    React.createElement(Button, { tag: Link, id: \"cancel-save\", to: \"/apps/task\", replace: true, color: \"info\" },\n                        React.createElement(FontAwesomeIcon, { icon: \"arrow-left\" }),\n                        \"\\u00A0\",\n                        React.createElement(\"span\", { className: \"d-none d-md-inline\" },\n                            React.createElement(Translate, { contentKey: \"entity.action.back\" }, \"Back\"))),\n                    \"\\u00A0\",\n                    React.createElement(Button, { color: \"primary\", id: \"save-entity\", type: \"submit\", disabled: updating },\n                        React.createElement(FontAwesomeIcon, { icon: \"save\" }),\n                        \"\\u00A0\",\n                        React.createElement(Translate, { contentKey: \"entity.action.save\" }, \"Save\"))))))));\n    };\n    return TaskUpdate;\n}(React.Component));\nexport { TaskUpdate };\nvar mapStateToProps = function (storeState) { return ({\n    users: storeState.userManagement.users,\n    tasks: storeState.task.entities,\n    taskEntity: storeState.task.entity,\n    loading: storeState.task.loading,\n    updating: storeState.task.updating,\n    updateSuccess: storeState.task.updateSuccess\n}); };\nvar mapDispatchToProps = {\n    getUsers: getUsers,\n    getTasks: getTasks,\n    getEntity: getEntity,\n    updateEntity: updateEntity,\n    createEntity: createEntity,\n    reset: reset\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskUpdate);\n",{"version":3,"file":"/home/selim/jhipsdev/src/main/webapp/app/entities/task/task-update.tsx","sourceRoot":"","sources":["/home/selim/jhipsdev/node_modules/tslint-loader/index.js!/home/selim/jhipsdev/src/main/webapp/app/entities/task/task-update.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Row, Col, Label } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\n// tslint:disable-next-line:no-unused-variable\nimport { Translate, translate, ICrudGetAction, ICrudGetAllAction, ICrudPutAction } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IRootState } from 'app/shared/reducers';\n\nimport { IUser } from 'app/shared/model/user.model';\nimport { getUsers } from 'app/modules/administration/user-management/user-management.reducer';\nimport { getEntities as getTasks } from 'app/entities/task/task.reducer';\nimport { getEntity, updateEntity, createEntity, reset } from './task.reducer';\nimport { ITask } from 'app/shared/model/task.model';\n// tslint:disable-next-line:no-unused-variable\nimport { convertDateTimeFromServer } from 'app/shared/util/date-utils';\nimport { mapIdList } from 'app/shared/util/entity-utils';\n\nexport interface ITaskUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\n\nexport interface ITaskUpdateState {\n  isNew: boolean;\n  userId: string;\n  taskId: string;\n  parentId: string;\n}\n\nexport class TaskUpdate extends React.Component<ITaskUpdateProps, ITaskUpdateState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userId: '0',\n      taskId: '0',\n      parentId: '0',\n      isNew: !this.props.match.params || !this.props.match.params.id\n    };\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\n      this.handleClose();\n    }\n  }\n\n  componentDidMount() {\n    if (this.state.isNew) {\n      this.props.reset();\n    } else {\n      this.props.getEntity(this.props.match.params.id);\n    }\n\n    this.props.getUsers();\n    this.props.getTasks();\n  }\n\n  saveEntity = (event, errors, values) => {\n    values.createDate = new Date(values.createDate);\n    values.deadline = new Date(values.deadline);\n\n    if (errors.length === 0) {\n      const { taskEntity } = this.props;\n      const entity = {\n        ...taskEntity,\n        ...values\n      };\n\n      if (this.state.isNew) {\n        this.props.createEntity(entity);\n      } else {\n        this.props.updateEntity(entity);\n      }\n    }\n  };\n\n  handleClose = () => {\n    this.props.history.push('/apps/task');\n  };\n\n  render() {\n    const { taskEntity, users, tasks, loading, updating } = this.props;\n    const { isNew } = this.state;\n\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h2 id=\"todoListApp.task.home.createOrEditLabel\">\n              <Translate contentKey=\"todoListApp.task.home.createOrEditLabel\">Create or edit a Task</Translate>\n            </h2>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            {loading ? (\n              <p>Loading...</p>\n            ) : (\n              <AvForm model={isNew ? {} : taskEntity} onSubmit={this.saveEntity}>\n                {!isNew ? (\n                  <AvGroup>\n                    <Label for=\"id\">\n                      <Translate contentKey=\"global.field.id\">ID</Translate>\n                    </Label>\n                    <AvInput id=\"task-id\" type=\"text\" className=\"form-control\" name=\"id\" required readOnly />\n                  </AvGroup>\n                ) : null}\n                <AvGroup>\n                  <Label id=\"nameLabel\" for=\"name\">\n                    <Translate contentKey=\"todoListApp.task.name\">Name</Translate>\n                  </Label>\n                  <AvField id=\"task-name\" type=\"text\" name=\"name\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"descriptionLabel\" for=\"description\">\n                    <Translate contentKey=\"todoListApp.task.description\">Description</Translate>\n                  </Label>\n                  <AvField id=\"task-description\" type=\"text\" name=\"description\" />\n                </AvGroup>\n                {!isNew ? (\n                  <AvGroup>\n                    <Label id=\"createDateLabel\" for=\"createDate\">\n                      <Translate contentKey=\"todoListApp.task.createDate\">Create Date</Translate>\n                    </Label>\n                    <AvInput\n                      id=\"task-createDate\"\n                      type=\"datetime-local\"\n                      className=\"form-control\"\n                      name=\"createDate\"\n                      readOnly\n                      value={isNew ? null : convertDateTimeFromServer(this.props.taskEntity.createDate)}\n                    />\n                  </AvGroup>\n                ) : null}\n                <AvGroup>\n                  <Label id=\"deadlineLabel\" for=\"deadline\">\n                    <Translate contentKey=\"todoListApp.task.deadline\">Deadline</Translate>\n                  </Label>\n                  <AvInput\n                    id=\"task-deadline\"\n                    type=\"datetime-local\"\n                    className=\"form-control\"\n                    name=\"deadline\"\n                    value={isNew ? null : convertDateTimeFromServer(this.props.taskEntity.deadline)}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"statusLabel\">\n                    <Translate contentKey=\"todoListApp.task.status\">Status</Translate>\n                  </Label>\n                  <AvInput\n                    id=\"task-status\"\n                    type=\"select\"\n                    className=\"form-control\"\n                    name=\"status\"\n                    value={(!isNew && taskEntity.status) || 'INPROGRESS'}\n                  >\n                    <option value=\"INPROGRESS\">\n                      <Translate contentKey=\"todoListApp.Status.INPROGRESS\" />\n                    </option>\n                    <option value=\"COMPLETED\">\n                      <Translate contentKey=\"todoListApp.Status.COMPLETED\" />\n                    </option>\n                    <option value=\"EXPIRED\">\n                      <Translate contentKey=\"todoListApp.Status.EXPIRED\" />\n                    </option>\n                  </AvInput>\n                </AvGroup>\n                {/*<AvGroup>*/}\n                {/*<Label for=\"user.id\">*/}\n                {/*<Translate contentKey=\"todoListApp.task.user\">User</Translate>*/}\n                {/*</Label>*/}\n                {/*<AvInput id=\"task-user\" type=\"select\" className=\"form-control\" name=\"user.id\">*/}\n                {/*<option value=\"\" key=\"0\" />*/}\n                {/*{users*/}\n                {/*? users.map(otherEntity => (*/}\n                {/*<option value={otherEntity.id} key={otherEntity.id}>*/}\n                {/*{otherEntity.id}*/}\n                {/*</option>*/}\n                {/*))*/}\n                {/*: null}*/}\n                {/*</AvInput>*/}\n                {/*</AvGroup>*/}\n                <AvGroup>\n                  <Label for=\"task.id\">\n                    <Translate contentKey=\"todoListApp.task.task\">Task</Translate>\n                  </Label>\n                  <AvInput id=\"task-task\" type=\"select\" className=\"form-control\" name=\"task.id\">\n                    <option value=\"\" key=\"0\" />\n                    {tasks\n                      ? tasks.map(otherEntity => (\n                          <option value={otherEntity.id} key={otherEntity.id}>\n                            {otherEntity.name}\n                          </option>\n                        ))\n                      : null}\n                  </AvInput>\n                </AvGroup>\n                <Button tag={Link} id=\"cancel-save\" to=\"/apps/task\" replace color=\"info\">\n                  <FontAwesomeIcon icon=\"arrow-left\" />\n                  &nbsp;\n                  <span className=\"d-none d-md-inline\">\n                    <Translate contentKey=\"entity.action.back\">Back</Translate>\n                  </span>\n                </Button>\n                &nbsp;\n                <Button color=\"primary\" id=\"save-entity\" type=\"submit\" disabled={updating}>\n                  <FontAwesomeIcon icon=\"save\" />\n                  &nbsp;\n                  <Translate contentKey=\"entity.action.save\">Save</Translate>\n                </Button>\n              </AvForm>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  users: storeState.userManagement.users,\n  tasks: storeState.task.entities,\n  taskEntity: storeState.task.entity,\n  loading: storeState.task.loading,\n  updating: storeState.task.updating,\n  updateSuccess: storeState.task.updateSuccess\n});\n\nconst mapDispatchToProps = {\n  getUsers,\n  getTasks,\n  getEntity,\n  updateEntity,\n  createEntity,\n  reset\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TaskUpdate);\n"]}]}