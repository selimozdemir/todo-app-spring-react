{"remainingRequest":"/home/selim/jhipsdev/node_modules/thread-loader/dist/cjs.js??ref--4-2!/home/selim/jhipsdev/node_modules/ts-loader/index.js??ref--4-3!/home/selim/jhipsdev/node_modules/tslint-loader/index.js!/home/selim/jhipsdev/src/main/webapp/app/entities/task/task.tsx","dependencies":[{"path":"/home/selim/jhipsdev/src/main/webapp/app/entities/task/task.tsx","mtime":1540057954565},{"path":"/home/selim/jhipsdev/node_modules/react-hot-loader/webpack.js","mtime":1505850161000},{"path":"/home/selim/jhipsdev/node_modules/cache-loader/dist/cjs.js","mtime":1540058733161},{"path":"/home/selim/jhipsdev/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/selim/jhipsdev/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/selim/jhipsdev/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button, InputGroup, Col, Row, Table } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput } from 'availity-reactstrap-validation';\n// tslint:disable-next-line:no-unused-variable\nimport { Translate, translate, TextFormat, getSortState, getPaginationItemsNumber, JhiPagination } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { getSearchEntities, getEntities } from './task.reducer';\n// tslint:disable-next-line:no-unused-variable\nimport { APP_DATE_FORMAT } from 'app/config/constants';\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\nvar Task = /** @class */ (function (_super) {\n    tslib_1.__extends(Task, _super);\n    function Task() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = tslib_1.__assign({ search: '' }, getSortState(_this.props.location, ITEMS_PER_PAGE));\n        _this.search = function () {\n            if (_this.state.search) {\n                _this.props.getSearchEntities(_this.state.search);\n            }\n        };\n        _this.clear = function () {\n            _this.props.getEntities();\n            _this.setState({\n                search: ''\n            });\n        };\n        _this.handleSearch = function (event) { return _this.setState({ search: event.target.value }); };\n        _this.sort = function (prop) { return function () {\n            _this.setState({\n                order: _this.state.order === 'asc' ? 'desc' : 'asc',\n                sort: prop\n            }, function () { return _this.sortEntities(); });\n        }; };\n        _this.handlePagination = function (activePage) { return _this.setState({ activePage: activePage }, function () { return _this.sortEntities(); }); };\n        _this.getEntities = function () {\n            var _a = _this.state, activePage = _a.activePage, itemsPerPage = _a.itemsPerPage, sort = _a.sort, order = _a.order;\n            _this.props.getEntities(activePage - 1, itemsPerPage, sort + \",\" + order);\n        };\n        return _this;\n    }\n    Task.prototype.componentDidMount = function () {\n        this.getEntities();\n    };\n    Task.prototype.sortEntities = function () {\n        this.getEntities();\n        this.props.history.push(this.props.location.pathname + \"?page=\" + this.state.activePage + \"&sort=\" + this.state.sort + \",\" + this.state.order);\n    };\n    Task.prototype.render = function () {\n        var _a = this.props, taskList = _a.taskList, match = _a.match, totalItems = _a.totalItems;\n        return (React.createElement(\"div\", null,\n            React.createElement(\"h2\", { id: \"task-heading\" },\n                React.createElement(Translate, { contentKey: \"todoListApp.task.home.title\" }, \"Tasks\"),\n                React.createElement(Link, { to: match.url + \"/new\", className: \"btn btn-primary float-right jh-create-entity\", id: \"jh-create-entity\" },\n                    React.createElement(FontAwesomeIcon, { icon: \"plus\" }),\n                    \"\\u00A0\",\n                    React.createElement(Translate, { contentKey: \"todoListApp.task.home.createLabel\" }, \"Create new Task\"))),\n            React.createElement(Row, null,\n                React.createElement(Col, { sm: \"12\" },\n                    React.createElement(AvForm, { onSubmit: this.search },\n                        React.createElement(AvGroup, null,\n                            React.createElement(InputGroup, null,\n                                React.createElement(AvInput, { type: \"text\", name: \"search\", value: this.state.search, onChange: this.handleSearch, placeholder: translate('todoListApp.task.home.search') }),\n                                React.createElement(Button, { className: \"input-group-addon\" },\n                                    React.createElement(FontAwesomeIcon, { icon: \"search\" })),\n                                React.createElement(Button, { type: \"reset\", className: \"input-group-addon\", onClick: this.clear },\n                                    React.createElement(FontAwesomeIcon, { icon: \"trash\" }))))))),\n            React.createElement(\"div\", { className: \"table-responsive\" },\n                React.createElement(Table, { responsive: true },\n                    React.createElement(\"thead\", null,\n                        React.createElement(\"tr\", null,\n                            React.createElement(\"th\", { className: \"hand\", onClick: this.sort('id') },\n                                React.createElement(Translate, { contentKey: \"global.field.id\" }, \"ID\"),\n                                \" \",\n                                React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\n                            React.createElement(\"th\", { className: \"hand\", onClick: this.sort('name') },\n                                React.createElement(Translate, { contentKey: \"todoListApp.task.name\" }, \"Name\"),\n                                \" \",\n                                React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\n                            React.createElement(\"th\", { className: \"hand\", onClick: this.sort('description') },\n                                React.createElement(Translate, { contentKey: \"todoListApp.task.description\" }, \"Description\"),\n                                \" \",\n                                React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\n                            React.createElement(\"th\", { className: \"hand\", onClick: this.sort('createDate') },\n                                React.createElement(Translate, { contentKey: \"todoListApp.task.createDate\" }, \"Create Date\"),\n                                \" \",\n                                React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\n                            React.createElement(\"th\", { className: \"hand\", onClick: this.sort('deadline') },\n                                React.createElement(Translate, { contentKey: \"todoListApp.task.deadline\" }, \"Deadline\"),\n                                \" \",\n                                React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\n                            React.createElement(\"th\", { className: \"hand\", onClick: this.sort('status') },\n                                React.createElement(Translate, { contentKey: \"todoListApp.task.status\" }, \"Status\"),\n                                \" \",\n                                React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\n                            React.createElement(\"th\", null,\n                                React.createElement(Translate, { contentKey: \"todoListApp.task.user\" }, \"User\"),\n                                \" \",\n                                React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\n                            React.createElement(\"th\", null,\n                                React.createElement(Translate, { contentKey: \"todoListApp.task.task\" }, \"Task\"),\n                                \" \",\n                                React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\n                            React.createElement(\"th\", null))),\n                    React.createElement(\"tbody\", null, taskList.map(function (task, i) { return (React.createElement(\"tr\", { key: \"entity-\" + i },\n                        React.createElement(\"td\", null,\n                            React.createElement(Button, { tag: Link, to: match.url + \"/\" + task.id, color: \"link\", size: \"sm\" }, task.id)),\n                        React.createElement(\"td\", null, task.name),\n                        React.createElement(\"td\", null, task.description),\n                        React.createElement(\"td\", null,\n                            React.createElement(TextFormat, { type: \"date\", value: task.createDate, format: APP_DATE_FORMAT })),\n                        React.createElement(\"td\", null,\n                            React.createElement(TextFormat, { type: \"date\", value: task.deadline, format: APP_DATE_FORMAT })),\n                        React.createElement(\"td\", null,\n                            React.createElement(Translate, { contentKey: \"todoListApp.Status.\" + task.status })),\n                        React.createElement(\"td\", null, task.user ? task.user.login : ''),\n                        React.createElement(\"td\", null, task.task ? React.createElement(Link, { to: \"task/\" + task.task.id }, task.task.name) : ''),\n                        React.createElement(\"td\", { className: \"text-right\" },\n                            React.createElement(\"div\", { className: \"btn-group flex-btn-group-container\" },\n                                React.createElement(Button, { tag: Link, to: match.url + \"/\" + task.id + \"/complete\", color: \"success\", size: \"sm\" },\n                                    React.createElement(FontAwesomeIcon, { icon: \"check\" }),\n                                    ' ',\n                                    React.createElement(\"span\", { className: \"d-none d-md-inline\" },\n                                        React.createElement(Translate, { contentKey: \"entity.action.complete\" }, \"Complete\"))),\n                                React.createElement(Button, { tag: Link, to: match.url + \"/\" + task.id, color: \"info\", size: \"sm\" },\n                                    React.createElement(FontAwesomeIcon, { icon: \"eye\" }),\n                                    ' ',\n                                    React.createElement(\"span\", { className: \"d-none d-md-inline\" },\n                                        React.createElement(Translate, { contentKey: \"entity.action.view\" }, \"View\"))),\n                                React.createElement(Button, { tag: Link, to: match.url + \"/\" + task.id + \"/edit\", color: \"primary\", size: \"sm\" },\n                                    React.createElement(FontAwesomeIcon, { icon: \"pencil-alt\" }),\n                                    ' ',\n                                    React.createElement(\"span\", { className: \"d-none d-md-inline\" },\n                                        React.createElement(Translate, { contentKey: \"entity.action.edit\" }, \"Edit\"))),\n                                React.createElement(Button, { tag: Link, to: match.url + \"/\" + task.id + \"/delete\", color: \"danger\", size: \"sm\" },\n                                    React.createElement(FontAwesomeIcon, { icon: \"trash\" }),\n                                    ' ',\n                                    React.createElement(\"span\", { className: \"d-none d-md-inline\" },\n                                        React.createElement(Translate, { contentKey: \"entity.action.delete\" }, \"Delete\"))))))); })))),\n            React.createElement(Row, { className: \"justify-content-center\" },\n                React.createElement(JhiPagination, { items: getPaginationItemsNumber(totalItems, this.state.itemsPerPage), activePage: this.state.activePage, onSelect: this.handlePagination, maxButtons: 5 }))));\n    };\n    return Task;\n}(React.Component));\nexport { Task };\nvar mapStateToProps = function (_a) {\n    var task = _a.task;\n    return ({\n        taskList: task.entities,\n        totalItems: task.totalItems\n    });\n};\nvar mapDispatchToProps = {\n    getSearchEntities: getSearchEntities,\n    getEntities: getEntities\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Task);\n",{"version":3,"file":"/home/selim/jhipsdev/src/main/webapp/app/entities/task/task.tsx","sourceRoot":"","sources":["/home/selim/jhipsdev/node_modules/tslint-loader/index.js!/home/selim/jhipsdev/src/main/webapp/app/entities/task/task.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, InputGroup, Col, Row, Table } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput } from 'availity-reactstrap-validation';\n// tslint:disable-next-line:no-unused-variable\nimport {\n  Translate,\n  translate,\n  ICrudSearchAction,\n  ICrudGetAllAction,\n  TextFormat,\n  getSortState,\n  IPaginationBaseState,\n  getPaginationItemsNumber,\n  JhiPagination\n} from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { IRootState } from 'app/shared/reducers';\nimport { getSearchEntities, getEntities } from './task.reducer';\nimport { ITask } from 'app/shared/model/task.model';\n// tslint:disable-next-line:no-unused-variable\nimport { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from 'app/config/constants';\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\n\nexport interface ITaskProps extends StateProps, DispatchProps, RouteComponentProps<{ url: string }> {}\n\nexport interface ITaskState extends IPaginationBaseState {\n  search: string;\n}\n\nexport class Task extends React.Component<ITaskProps, ITaskState> {\n  state: ITaskState = {\n    search: '',\n    ...getSortState(this.props.location, ITEMS_PER_PAGE)\n  };\n\n  componentDidMount() {\n    this.getEntities();\n  }\n\n  search = () => {\n    if (this.state.search) {\n      this.props.getSearchEntities(this.state.search);\n    }\n  };\n\n  clear = () => {\n    this.props.getEntities();\n    this.setState({\n      search: ''\n    });\n  };\n\n  handleSearch = event => this.setState({ search: event.target.value });\n\n  sort = prop => () => {\n    this.setState(\n      {\n        order: this.state.order === 'asc' ? 'desc' : 'asc',\n        sort: prop\n      },\n      () => this.sortEntities()\n    );\n  };\n\n  sortEntities() {\n    this.getEntities();\n    this.props.history.push(`${this.props.location.pathname}?page=${this.state.activePage}&sort=${this.state.sort},${this.state.order}`);\n  }\n\n  handlePagination = activePage => this.setState({ activePage }, () => this.sortEntities());\n\n  getEntities = () => {\n    const { activePage, itemsPerPage, sort, order } = this.state;\n    this.props.getEntities(activePage - 1, itemsPerPage, `${sort},${order}`);\n  };\n\n  render() {\n    const { taskList, match, totalItems } = this.props;\n    return (\n      <div>\n        <h2 id=\"task-heading\">\n          <Translate contentKey=\"todoListApp.task.home.title\">Tasks</Translate>\n          <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\" id=\"jh-create-entity\">\n            <FontAwesomeIcon icon=\"plus\" />\n            &nbsp;\n            <Translate contentKey=\"todoListApp.task.home.createLabel\">Create new Task</Translate>\n          </Link>\n        </h2>\n        <Row>\n          <Col sm=\"12\">\n            <AvForm onSubmit={this.search}>\n              <AvGroup>\n                <InputGroup>\n                  <AvInput\n                    type=\"text\"\n                    name=\"search\"\n                    value={this.state.search}\n                    onChange={this.handleSearch}\n                    placeholder={translate('todoListApp.task.home.search')}\n                  />\n                  <Button className=\"input-group-addon\">\n                    <FontAwesomeIcon icon=\"search\" />\n                  </Button>\n                  <Button type=\"reset\" className=\"input-group-addon\" onClick={this.clear}>\n                    <FontAwesomeIcon icon=\"trash\" />\n                  </Button>\n                </InputGroup>\n              </AvGroup>\n            </AvForm>\n          </Col>\n        </Row>\n        <div className=\"table-responsive\">\n          <Table responsive>\n            <thead>\n              <tr>\n                <th className=\"hand\" onClick={this.sort('id')}>\n                  <Translate contentKey=\"global.field.id\">ID</Translate> <FontAwesomeIcon icon=\"sort\" />\n                </th>\n                <th className=\"hand\" onClick={this.sort('name')}>\n                  <Translate contentKey=\"todoListApp.task.name\">Name</Translate> <FontAwesomeIcon icon=\"sort\" />\n                </th>\n                <th className=\"hand\" onClick={this.sort('description')}>\n                  <Translate contentKey=\"todoListApp.task.description\">Description</Translate> <FontAwesomeIcon icon=\"sort\" />\n                </th>\n                <th className=\"hand\" onClick={this.sort('createDate')}>\n                  <Translate contentKey=\"todoListApp.task.createDate\">Create Date</Translate> <FontAwesomeIcon icon=\"sort\" />\n                </th>\n                <th className=\"hand\" onClick={this.sort('deadline')}>\n                  <Translate contentKey=\"todoListApp.task.deadline\">Deadline</Translate> <FontAwesomeIcon icon=\"sort\" />\n                </th>\n                <th className=\"hand\" onClick={this.sort('status')}>\n                  <Translate contentKey=\"todoListApp.task.status\">Status</Translate> <FontAwesomeIcon icon=\"sort\" />\n                </th>\n                <th>\n                  <Translate contentKey=\"todoListApp.task.user\">User</Translate> <FontAwesomeIcon icon=\"sort\" />\n                </th>\n                <th>\n                  <Translate contentKey=\"todoListApp.task.task\">Task</Translate> <FontAwesomeIcon icon=\"sort\" />\n                </th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {taskList.map((task, i) => (\n                <tr key={`entity-${i}`}>\n                  <td>\n                    <Button tag={Link} to={`${match.url}/${task.id}`} color=\"link\" size=\"sm\">\n                      {task.id}\n                    </Button>\n                  </td>\n                  <td>{task.name}</td>\n                  <td>{task.description}</td>\n                  <td>\n                    <TextFormat type=\"date\" value={task.createDate} format={APP_DATE_FORMAT} />\n                  </td>\n                  <td>\n                    <TextFormat type=\"date\" value={task.deadline} format={APP_DATE_FORMAT} />\n                  </td>\n                  <td>\n                    <Translate contentKey={`todoListApp.Status.${task.status}`} />\n                  </td>\n                  <td>{task.user ? task.user.login : ''}</td>\n                  <td>{task.task ? <Link to={`task/${task.task.id}`}>{task.task.name}</Link> : ''}</td>\n                  <td className=\"text-right\">\n                    <div className=\"btn-group flex-btn-group-container\">\n                      <Button tag={Link} to={`${match.url}/${task.id}/complete`} color=\"success\" size=\"sm\">\n                        <FontAwesomeIcon icon=\"check\" />{' '}\n                        <span className=\"d-none d-md-inline\">\n                          <Translate contentKey=\"entity.action.complete\">Complete</Translate>\n                        </span>\n                      </Button>\n                      <Button tag={Link} to={`${match.url}/${task.id}`} color=\"info\" size=\"sm\">\n                        <FontAwesomeIcon icon=\"eye\" />{' '}\n                        <span className=\"d-none d-md-inline\">\n                          <Translate contentKey=\"entity.action.view\">View</Translate>\n                        </span>\n                      </Button>\n                      <Button tag={Link} to={`${match.url}/${task.id}/edit`} color=\"primary\" size=\"sm\">\n                        <FontAwesomeIcon icon=\"pencil-alt\" />{' '}\n                        <span className=\"d-none d-md-inline\">\n                          <Translate contentKey=\"entity.action.edit\">Edit</Translate>\n                        </span>\n                      </Button>\n                      <Button tag={Link} to={`${match.url}/${task.id}/delete`} color=\"danger\" size=\"sm\">\n                        <FontAwesomeIcon icon=\"trash\" />{' '}\n                        <span className=\"d-none d-md-inline\">\n                          <Translate contentKey=\"entity.action.delete\">Delete</Translate>\n                        </span>\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </div>\n        <Row className=\"justify-content-center\">\n          <JhiPagination\n            items={getPaginationItemsNumber(totalItems, this.state.itemsPerPage)}\n            activePage={this.state.activePage}\n            onSelect={this.handlePagination}\n            maxButtons={5}\n          />\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ task }: IRootState) => ({\n  taskList: task.entities,\n  totalItems: task.totalItems\n});\n\nconst mapDispatchToProps = {\n  getSearchEntities,\n  getEntities\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Task);\n"]}]}