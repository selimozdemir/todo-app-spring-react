{"remainingRequest":"/home/selim/jhipsdev/node_modules/thread-loader/dist/cjs.js??ref--4-2!/home/selim/jhipsdev/node_modules/ts-loader/index.js??ref--4-3!/home/selim/jhipsdev/node_modules/tslint-loader/index.js!/home/selim/jhipsdev/src/main/webapp/app/modules/account/settings/settings.reducer.ts","dependencies":[{"path":"/home/selim/jhipsdev/src/main/webapp/app/modules/account/settings/settings.reducer.ts","mtime":1540057954565},{"path":"/home/selim/jhipsdev/node_modules/react-hot-loader/webpack.js","mtime":1505850161000},{"path":"/home/selim/jhipsdev/node_modules/cache-loader/dist/cjs.js","mtime":1540058733161},{"path":"/home/selim/jhipsdev/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/selim/jhipsdev/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/selim/jhipsdev/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["var _this = this;\nimport * as tslib_1 from \"tslib\";\nimport axios from 'axios';\nimport { translate, Storage } from 'react-jhipster';\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\nimport { getSession } from 'app/shared/reducers/authentication';\nexport var ACTION_TYPES = {\n    UPDATE_ACCOUNT: 'account/UPDATE_ACCOUNT',\n    RESET: 'account/RESET'\n};\nvar initialState = {\n    loading: false,\n    errorMessage: null,\n    updateSuccess: false,\n    updateFailure: false\n};\n// Reducer\nexport default (function (state, action) {\n    if (state === void 0) { state = initialState; }\n    switch (action.type) {\n        case REQUEST(ACTION_TYPES.UPDATE_ACCOUNT):\n            return tslib_1.__assign({}, state, { errorMessage: null, updateSuccess: false, loading: true });\n        case FAILURE(ACTION_TYPES.UPDATE_ACCOUNT):\n            return tslib_1.__assign({}, state, { loading: false, updateSuccess: false, updateFailure: true });\n        case SUCCESS(ACTION_TYPES.UPDATE_ACCOUNT):\n            return tslib_1.__assign({}, state, { loading: false, updateSuccess: true, updateFailure: false });\n        case ACTION_TYPES.RESET:\n            return tslib_1.__assign({}, initialState);\n        default:\n            return state;\n    }\n});\n// Actions\nvar apiUrl = 'api/account';\nexport var saveAccountSettings = function (account) { return function (dispatch, getState) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n            case 0: return [4 /*yield*/, dispatch({\n                    type: ACTION_TYPES.UPDATE_ACCOUNT,\n                    payload: axios.post(apiUrl, account),\n                    meta: {\n                        successMessage: translate('settings.messages.success')\n                    }\n                })];\n            case 1:\n                _a.sent();\n                if (Storage.session.get(\"locale\")) {\n                    Storage.session.remove(\"locale\");\n                }\n                return [4 /*yield*/, dispatch(getSession())];\n            case 2:\n                _a.sent();\n                return [2 /*return*/];\n        }\n    });\n}); }; };\nexport var reset = function () { return ({\n    type: ACTION_TYPES.RESET\n}); };\n",{"version":3,"file":"/home/selim/jhipsdev/src/main/webapp/app/modules/account/settings/settings.reducer.ts","sourceRoot":"","sources":["/home/selim/jhipsdev/node_modules/tslint-loader/index.js!/home/selim/jhipsdev/src/main/webapp/app/modules/account/settings/settings.reducer.ts"],"names":[],"mappings":"AAAA,iBA2EA;;AA3EA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAEpD,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,sCAAsC,CAAC;AACjF,OAAO,EAAE,UAAU,EAAE,MAAM,oCAAoC,CAAC;AAEhE,MAAM,CAAC,IAAM,YAAY,GAAG;IAC1B,cAAc,EAAE,wBAAwB;IACxC,KAAK,EAAE,eAAe;CACvB,CAAC;AAEF,IAAM,YAAY,GAAG;IACnB,OAAO,EAAE,KAAK;IACd,YAAY,EAAE,IAAI;IAClB,aAAa,EAAE,KAAK;IACpB,aAAa,EAAE,KAAK;CACrB,CAAC;AAIF,UAAU;AACV,gBAAe,UAAC,KAAmC,EAAE,MAAM;IAA3C,sBAAA,EAAA,oBAAmC;IACjD,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC;YACvC,4BACK,KAAK,IACR,YAAY,EAAE,IAAI,EAClB,aAAa,EAAE,KAAK,EACpB,OAAO,EAAE,IAAI,IACb;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC;YACvC,4BACK,KAAK,IACR,OAAO,EAAE,KAAK,EACd,aAAa,EAAE,KAAK,EACpB,aAAa,EAAE,IAAI,IACnB;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC;YACvC,4BACK,KAAK,IACR,OAAO,EAAE,KAAK,EACd,aAAa,EAAE,IAAI,EACnB,aAAa,EAAE,KAAK,IACpB;QACJ,KAAK,YAAY,CAAC,KAAK;YACrB,4BACK,YAAY,EACf;QACJ;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC,EAAC;AAEF,UAAU;AACV,IAAM,MAAM,GAAG,aAAa,CAAC;AAE7B,MAAM,CAAC,IAAM,mBAAmB,GAAG,UAAA,OAAO,IAAI,OAAA,UAAO,QAAQ,EAAE,QAAQ;;;oBACrE,qBAAM,QAAQ,CAAC;oBACb,IAAI,EAAE,YAAY,CAAC,cAAc;oBACjC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC;oBACpC,IAAI,EAAE;wBACJ,cAAc,EAAE,SAAS,CAAC,2BAA2B,CAAC;qBACvD;iBACF,CAAC,EAAA;;gBANF,SAME,CAAC;gBAEH,IAAI,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;oBACjC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;iBAClC;gBAED,qBAAM,QAAQ,CAAC,UAAU,EAAE,CAAC,EAAA;;gBAA5B,SAA4B,CAAC;;;;KAC9B,EAd6C,CAc7C,CAAC;AAEF,MAAM,CAAC,IAAM,KAAK,GAAG,cAAM,OAAA,CAAC;IAC1B,IAAI,EAAE,YAAY,CAAC,KAAK;CACzB,CAAC,EAFyB,CAEzB,CAAC","sourcesContent":["import axios from 'axios';\nimport { translate, Storage } from 'react-jhipster';\n\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\nimport { getSession } from 'app/shared/reducers/authentication';\n\nexport const ACTION_TYPES = {\n  UPDATE_ACCOUNT: 'account/UPDATE_ACCOUNT',\n  RESET: 'account/RESET'\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  updateSuccess: false,\n  updateFailure: false\n};\n\nexport type SettingsState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: SettingsState = initialState, action): SettingsState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.UPDATE_ACCOUNT):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        loading: true\n      };\n    case FAILURE(ACTION_TYPES.UPDATE_ACCOUNT):\n      return {\n        ...state,\n        loading: false,\n        updateSuccess: false,\n        updateFailure: true\n      };\n    case SUCCESS(ACTION_TYPES.UPDATE_ACCOUNT):\n      return {\n        ...state,\n        loading: false,\n        updateSuccess: true,\n        updateFailure: false\n      };\n    case ACTION_TYPES.RESET:\n      return {\n        ...initialState\n      };\n    default:\n      return state;\n  }\n};\n\n// Actions\nconst apiUrl = 'api/account';\n\nexport const saveAccountSettings = account => async (dispatch, getState) => {\n  await dispatch({\n    type: ACTION_TYPES.UPDATE_ACCOUNT,\n    payload: axios.post(apiUrl, account),\n    meta: {\n      successMessage: translate('settings.messages.success')\n    }\n  });\n\n  if (Storage.session.get(`locale`)) {\n    Storage.session.remove(`locale`);\n  }\n\n  await dispatch(getSession());\n};\n\nexport const reset = () => ({\n  type: ACTION_TYPES.RESET\n});\n"]}]}