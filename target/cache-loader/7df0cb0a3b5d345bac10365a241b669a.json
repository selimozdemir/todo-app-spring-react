{"remainingRequest":"/home/selim/jhipsdev/node_modules/thread-loader/dist/cjs.js??ref--4-2!/home/selim/jhipsdev/node_modules/ts-loader/index.js??ref--4-3!/home/selim/jhipsdev/node_modules/tslint-loader/index.js!/home/selim/jhipsdev/src/main/webapp/app/shared/reducers/locale.ts","dependencies":[{"path":"/home/selim/jhipsdev/src/main/webapp/app/shared/reducers/locale.ts","mtime":1540057954569},{"path":"/home/selim/jhipsdev/node_modules/react-hot-loader/webpack.js","mtime":1505850161000},{"path":"/home/selim/jhipsdev/node_modules/cache-loader/dist/cjs.js","mtime":1540058733161},{"path":"/home/selim/jhipsdev/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/selim/jhipsdev/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/selim/jhipsdev/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["var _this = this;\nimport * as tslib_1 from \"tslib\";\nimport axios from 'axios';\nimport { TranslatorContext } from 'react-jhipster';\nexport var ACTION_TYPES = {\n    SET_LOCALE: 'locale/SET_LOCALE'\n};\nvar initialState = {\n    currentLocale: undefined\n};\nexport default (function (state, action) {\n    if (state === void 0) { state = initialState; }\n    switch (action.type) {\n        case ACTION_TYPES.SET_LOCALE:\n            var currentLocale = action.locale;\n            if (state.currentLocale !== currentLocale) {\n                TranslatorContext.setLocale(currentLocale);\n            }\n            return {\n                currentLocale: currentLocale\n            };\n        default:\n            return state;\n    }\n});\nexport var setLocale = function (locale) { return function (dispatch) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var response;\n    return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (!!Object.keys(TranslatorContext.context.translations).includes(locale)) return [3 /*break*/, 2];\n                return [4 /*yield*/, axios.get(\"i18n/\" + locale + \".json?buildTimestamp=\" + process.env.BUILD_TIMESTAMP)];\n            case 1:\n                response = _a.sent();\n                TranslatorContext.registerTranslations(locale, response.data);\n                _a.label = 2;\n            case 2:\n                dispatch({\n                    type: ACTION_TYPES.SET_LOCALE,\n                    locale: locale\n                });\n                return [2 /*return*/];\n        }\n    });\n}); }; };\n",{"version":3,"file":"/home/selim/jhipsdev/src/main/webapp/app/shared/reducers/locale.ts","sourceRoot":"","sources":["/home/selim/jhipsdev/node_modules/tslint-loader/index.js!/home/selim/jhipsdev/src/main/webapp/app/shared/reducers/locale.ts"],"names":[],"mappings":"AAAA,iBAuCA;;AAvCA,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,iBAAiB,EAAW,MAAM,gBAAgB,CAAC;AAE5D,MAAM,CAAC,IAAM,YAAY,GAAG;IAC1B,UAAU,EAAE,mBAAmB;CAChC,CAAC;AAEF,IAAM,YAAY,GAAG;IACnB,aAAa,EAAE,SAAS;CACzB,CAAC;AAIF,gBAAe,UAAC,KAAiC,EAAE,MAAM;IAAzC,sBAAA,EAAA,oBAAiC;IAC/C,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,YAAY,CAAC,UAAU;YAC1B,IAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC;YACpC,IAAI,KAAK,CAAC,aAAa,KAAK,aAAa,EAAE;gBACzC,iBAAiB,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;aAC5C;YACD,OAAO;gBACL,aAAa,eAAA;aACd,CAAC;QACJ;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC,EAAC;AAEF,MAAM,CAAC,IAAM,SAAS,GAAG,UAAA,MAAM,IAAI,OAAA,UAAM,QAAQ;;;;;qBAC3C,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,EAArE,wBAAqE;gBACtD,qBAAM,KAAK,CAAC,GAAG,CAAC,UAAQ,MAAM,6BAAwB,OAAO,CAAC,GAAG,CAAC,eAAiB,CAAC,EAAA;;gBAA/F,QAAQ,GAAG,SAAoF;gBACrG,iBAAiB,CAAC,oBAAoB,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;;;gBAEhE,QAAQ,CAAC;oBACP,IAAI,EAAE,YAAY,CAAC,UAAU;oBAC7B,MAAM,QAAA;iBACP,CAAC,CAAC;;;;KACJ,EATkC,CASlC,CAAC","sourcesContent":["import axios from 'axios';\n\nimport { TranslatorContext, Storage } from 'react-jhipster';\n\nexport const ACTION_TYPES = {\n  SET_LOCALE: 'locale/SET_LOCALE'\n};\n\nconst initialState = {\n  currentLocale: undefined\n};\n\nexport type LocaleState = Readonly<typeof initialState>;\n\nexport default (state: LocaleState = initialState, action): LocaleState => {\n  switch (action.type) {\n    case ACTION_TYPES.SET_LOCALE:\n      const currentLocale = action.locale;\n      if (state.currentLocale !== currentLocale) {\n        TranslatorContext.setLocale(currentLocale);\n      }\n      return {\n        currentLocale\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setLocale = locale => async dispatch => {\n  if (!Object.keys(TranslatorContext.context.translations).includes(locale)) {\n    const response = await axios.get(`i18n/${locale}.json?buildTimestamp=${process.env.BUILD_TIMESTAMP}`);\n    TranslatorContext.registerTranslations(locale, response.data);\n  }\n  dispatch({\n    type: ACTION_TYPES.SET_LOCALE,\n    locale\n  });\n};\n"]}]}